{"version":3,"file":"static/js/736.a7fa0f7e.chunk.js","mappings":"kRAGaA,EAAcC,EAAAA,EAAAA,GAAH,yHAOXC,EAAcD,EAAAA,EAAAA,IAAH,kIAQXE,EAAWF,EAAAA,EAAAA,GAAH,gMAURG,EAAWH,EAAAA,EAAAA,EAAH,gEAKRI,EAAgBJ,EAAAA,EAAAA,IAAH,+J,SC4B1B,EAtDa,WACT,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAmBA,OAhBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQ,mCAAG,WAAOR,GAAP,gGAEcS,EAAAA,GAAsBT,GAFpC,OAEHU,EAFG,OAGTN,EAAQM,GACRJ,GAAiB,GACjBK,QAAQC,IAAIF,GALH,gDAQTC,QAAQC,IAAI,KAAMC,SART,yDAAH,sDAYdL,EAASR,EACZ,GAAE,CAACA,IAEgB,IAAhBG,EAAKW,QAAgBT,GACd,SAACT,EAAD,iEAKH,SAACF,EAAD,UACKS,EAAKY,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GACxC,OAEI,UAACtB,EAAD,YACI,gBACIuB,IAAKJ,EAAY,UA9B7B,mCA8B6B,OAAgBA,GAAhB,uEACjBK,IAAI,GACJC,MAAM,SAEN,UAACvB,EAAD,YACI,SAACD,EAAD,UAAWmB,KACX,UAACnB,EAAD,yBAAsBoB,UARnBC,EActB,KAMhB,C,8LCzDKI,EAAW,gCACXC,EAAM,mCAECC,EAAmB,mCAAG,oGACVC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFV,cAC3Bd,EAD2B,yBAK1BA,EAASiB,KAAKC,SALY,2CAAH,qDAQnBC,EAAe,mCAAG,WAAMC,GAAN,uFACNJ,EAAAA,GAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,4DACqEM,IAF/D,cACvBpB,EADuB,yBAItBA,EAASiB,KAAKC,SAJQ,2CAAH,sDAOfG,EAAe,mCAAG,WAAMZ,GAAN,uFACNO,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,oBACaK,EADb,kBADM,cACvBd,EADuB,OAI7BC,QAAQC,IAAIF,GAJiB,kBAKtBA,EAASiB,MALa,2CAAH,sDAQfK,EAAiB,mCAAG,WAAMb,GAAN,uFACRO,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBK,EADrB,oBADQ,cACzBd,EADyB,OAI/BC,QAAQC,IAAIF,GAJmB,kBAKxBA,EAASiB,KAAKxB,MALU,2CAAH,sDAQjB8B,EAAiB,mCAAG,WAAMd,GAAN,uFACRO,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBK,EADrB,2BADQ,cACzBd,EADyB,yBAIxBA,EAASiB,KAAKC,SAJU,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\n\nexport const CastWrapper = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-bottom: 30px;\n`;\nexport const CastWarning = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  color: #008080;\n`;\n\nexport const CastItem = styled.li`\n    margin-bottom: 10px;\n    width: 280px;\n    border: 2px solid #008080;\n    display: flex;\n    padding: 15px;\n    border-radius: 15px;\n    margin-right: 10px;\n`;\n\nexport const CastInfo = styled.p`\n  margin-top: 8px;\n  font-size: 16px;\n`;\n\nexport const CastInfoWrapp = styled.div`\n    display: flex;\n    flex-direction: column;\n    -webkit-box-pack: center;\n    justify-content: center; \n    margin-left: 5px; \n`;","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport * as API from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { CastWarning, CastItem, CastInfo, CastWrapper, CastInfoWrapp } from 'components/Cast/Cast.styled';\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [isCastLoading, setIsCastLoading] = useState(false);\n    const baseURL = 'https://image.tmdb.org/t/p/w200';\n\n    useEffect(() => {\n        const castInfo = async (movieId) => {\n            try {\n                const response = await API.getMovieByCredits(movieId);\n                setCast(response);\n                setIsCastLoading(true);\n                console.log(response);\n            }\n            catch (error) {\n                console.log(error.message);\n            }\n            \n        }\n        castInfo(movieId);\n    }, [movieId]);\n\n    if (cast.length === 0 && isCastLoading) {\n        return <CastWarning>We don't have any cast information on this movie.</CastWarning>\n    }\n\n    return (\n        \n            <CastWrapper>\n                {cast.map(({ profile_path, name, character, id }) => {\n                    return (\n                    \n                        <CastItem key={id}>\n                            <img\n                                src={profile_path ? `${baseURL}${profile_path}` : `https://upload.wikimedia.org/wikipedia/commons/6/6c/No_image_3x4.svg`}\n                                alt=\"\"\n                                width=\"180\"\n                                />\n                                <CastInfoWrapp>\n                                    <CastInfo>{name}</CastInfo>\n                                    <CastInfo>Character: {character}</CastInfo>\n                                </CastInfoWrapp>\n                        </CastItem>\n                    \n            \n                );\n                })}\n            </CastWrapper>\n            \n        \n\n    );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  castInfo: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '623136123c076ad8526bb20a79876cb7';\n\nexport const getMorePopularMovie = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&language=eng`\n  );\n  console.log(response);\n  return response.data;\n};\n\nexport const getMovieByCredits = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  console.log(response);\n  return response.data.cast;\n};\n\nexport const getMovieByReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["CastWrapper","styled","CastWarning","CastItem","CastInfo","CastInfoWrapp","movieId","useParams","useState","cast","setCast","isCastLoading","setIsCastLoading","useEffect","castInfo","API","response","console","log","message","length","map","profile_path","name","character","id","src","alt","width","BASE_URL","KEY","getMorePopularMovie","axios","data","results","getMovieByQuery","query","getMovieDetails","getMovieByCredits","getMovieByReviews"],"sourceRoot":""}